// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: pb/proto/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudIdeService_CreateSpace_FullMethodName       = "/pb.CloudIdeService/createSpace"
	CloudIdeService_StartSpace_FullMethodName        = "/pb.CloudIdeService/startSpace"
	CloudIdeService_DeleteSpace_FullMethodName       = "/pb.CloudIdeService/deleteSpace"
	CloudIdeService_StopSpace_FullMethodName         = "/pb.CloudIdeService/stopSpace"
	CloudIdeService_RunningWorkspaces_FullMethodName = "/pb.CloudIdeService/runningWorkspaces"
)

// CloudIdeServiceClient is the client API for CloudIdeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudIdeServiceClient interface {
	// 创建云IDE空间并等待Pod状态变为Running,第一次创建,需要挂载存储卷
	CreateSpace(ctx context.Context, in *RequestCreate, opts ...grpc.CallOption) (*ResponseCreate, error)
	// 启动(创建)云IDE空间,非第一次创建,无需挂载存储卷,使用之前的存储卷
	StartSpace(ctx context.Context, in *RequestStart, opts ...grpc.CallOption) (*ResponseStart, error)
	// 删除云IDE空间,需要删除存储卷
	DeleteSpace(ctx context.Context, in *RequestDelete, opts ...grpc.CallOption) (*ResponseDelete, error)
	// 停止(删除)云工作空间,无需删除存储卷
	StopSpace(ctx context.Context, in *RequestStop, opts ...grpc.CallOption) (*ResponseStop, error)
	// 获取运行中的Workspace
	RunningWorkspaces(ctx context.Context, in *RequestRunningWorkspaces, opts ...grpc.CallOption) (*ResponseRunningWorkspace, error)
}

type cloudIdeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudIdeServiceClient(cc grpc.ClientConnInterface) CloudIdeServiceClient {
	return &cloudIdeServiceClient{cc}
}

func (c *cloudIdeServiceClient) CreateSpace(ctx context.Context, in *RequestCreate, opts ...grpc.CallOption) (*ResponseCreate, error) {
	out := new(ResponseCreate)
	err := c.cc.Invoke(ctx, CloudIdeService_CreateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudIdeServiceClient) StartSpace(ctx context.Context, in *RequestStart, opts ...grpc.CallOption) (*ResponseStart, error) {
	out := new(ResponseStart)
	err := c.cc.Invoke(ctx, CloudIdeService_StartSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudIdeServiceClient) DeleteSpace(ctx context.Context, in *RequestDelete, opts ...grpc.CallOption) (*ResponseDelete, error) {
	out := new(ResponseDelete)
	err := c.cc.Invoke(ctx, CloudIdeService_DeleteSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudIdeServiceClient) StopSpace(ctx context.Context, in *RequestStop, opts ...grpc.CallOption) (*ResponseStop, error) {
	out := new(ResponseStop)
	err := c.cc.Invoke(ctx, CloudIdeService_StopSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudIdeServiceClient) RunningWorkspaces(ctx context.Context, in *RequestRunningWorkspaces, opts ...grpc.CallOption) (*ResponseRunningWorkspace, error) {
	out := new(ResponseRunningWorkspace)
	err := c.cc.Invoke(ctx, CloudIdeService_RunningWorkspaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudIdeServiceServer is the server API for CloudIdeService service.
// All implementations must embed UnimplementedCloudIdeServiceServer
// for forward compatibility
type CloudIdeServiceServer interface {
	// 创建云IDE空间并等待Pod状态变为Running,第一次创建,需要挂载存储卷
	CreateSpace(context.Context, *RequestCreate) (*ResponseCreate, error)
	// 启动(创建)云IDE空间,非第一次创建,无需挂载存储卷,使用之前的存储卷
	StartSpace(context.Context, *RequestStart) (*ResponseStart, error)
	// 删除云IDE空间,需要删除存储卷
	DeleteSpace(context.Context, *RequestDelete) (*ResponseDelete, error)
	// 停止(删除)云工作空间,无需删除存储卷
	StopSpace(context.Context, *RequestStop) (*ResponseStop, error)
	// 获取运行中的Workspace
	RunningWorkspaces(context.Context, *RequestRunningWorkspaces) (*ResponseRunningWorkspace, error)
	mustEmbedUnimplementedCloudIdeServiceServer()
}

// UnimplementedCloudIdeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudIdeServiceServer struct {
}

func (UnimplementedCloudIdeServiceServer) CreateSpace(context.Context, *RequestCreate) (*ResponseCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedCloudIdeServiceServer) StartSpace(context.Context, *RequestStart) (*ResponseStart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSpace not implemented")
}
func (UnimplementedCloudIdeServiceServer) DeleteSpace(context.Context, *RequestDelete) (*ResponseDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedCloudIdeServiceServer) StopSpace(context.Context, *RequestStop) (*ResponseStop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSpace not implemented")
}
func (UnimplementedCloudIdeServiceServer) RunningWorkspaces(context.Context, *RequestRunningWorkspaces) (*ResponseRunningWorkspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunningWorkspaces not implemented")
}
func (UnimplementedCloudIdeServiceServer) mustEmbedUnimplementedCloudIdeServiceServer() {}

// UnsafeCloudIdeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudIdeServiceServer will
// result in compilation errors.
type UnsafeCloudIdeServiceServer interface {
	mustEmbedUnimplementedCloudIdeServiceServer()
}

func RegisterCloudIdeServiceServer(s grpc.ServiceRegistrar, srv CloudIdeServiceServer) {
	s.RegisterService(&CloudIdeService_ServiceDesc, srv)
}

func _CloudIdeService_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudIdeServiceServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudIdeService_CreateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudIdeServiceServer).CreateSpace(ctx, req.(*RequestCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudIdeService_StartSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudIdeServiceServer).StartSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudIdeService_StartSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudIdeServiceServer).StartSpace(ctx, req.(*RequestStart))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudIdeService_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudIdeServiceServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudIdeService_DeleteSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudIdeServiceServer).DeleteSpace(ctx, req.(*RequestDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudIdeService_StopSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudIdeServiceServer).StopSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudIdeService_StopSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudIdeServiceServer).StopSpace(ctx, req.(*RequestStop))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudIdeService_RunningWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRunningWorkspaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudIdeServiceServer).RunningWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudIdeService_RunningWorkspaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudIdeServiceServer).RunningWorkspaces(ctx, req.(*RequestRunningWorkspaces))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudIdeService_ServiceDesc is the grpc.ServiceDesc for CloudIdeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudIdeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CloudIdeService",
	HandlerType: (*CloudIdeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createSpace",
			Handler:    _CloudIdeService_CreateSpace_Handler,
		},
		{
			MethodName: "startSpace",
			Handler:    _CloudIdeService_StartSpace_Handler,
		},
		{
			MethodName: "deleteSpace",
			Handler:    _CloudIdeService_DeleteSpace_Handler,
		},
		{
			MethodName: "stopSpace",
			Handler:    _CloudIdeService_StopSpace_Handler,
		},
		{
			MethodName: "runningWorkspaces",
			Handler:    _CloudIdeService_RunningWorkspaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/proto/service.proto",
}
